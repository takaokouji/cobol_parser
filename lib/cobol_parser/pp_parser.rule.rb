#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.1
# from Racc grammar file "".
#

require 'racc/parser.rb'
module CobolParser
  class PPParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    24,    25,     2,    11,     6,     7,    26,    15,    16,    48,
    18,    19,    47,    15,    16,    20,    27,    29,    15,    16,
    40,    41,    15,    16,    15,    16,    15,    16,     8,     9,
    22,    23,    31,    32,    33,    34,    36,    37,    39,    43,
    45,    49 ]

racc_action_check = [
    14,    14,     1,     7,     1,     1,    14,     7,     7,    38,
     9,     9,    38,    10,    10,    10,    15,    15,    23,    23,
    28,    28,    34,    34,    43,    43,    50,    50,     2,     6,
    11,    12,    17,    18,    19,    21,    24,    25,    26,    30,
    31,    42 ]

racc_action_pointer = [
   nil,     2,    28,   nil,   nil,   nil,    17,    -4,   nil,     2,
     2,    17,    21,   nil,    -8,     5,   nil,    28,    21,    22,
   nil,    25,   nil,     7,    24,    25,    26,   nil,     9,   nil,
    33,    35,   nil,   nil,    11,   nil,   nil,   nil,    -3,   nil,
   nil,   nil,    28,    13,   nil,   nil,   nil,   nil,   nil,   nil,
    15 ]

racc_action_default = [
    -1,   -31,   -31,    -2,    -3,    -4,   -31,   -31,    51,    -6,
   -31,   -31,   -31,   -17,   -18,   -31,   -23,    -9,   -31,   -31,
   -13,   -31,   -14,   -31,   -31,   -31,   -31,   -19,   -31,   -21,
   -11,   -29,    -7,    -8,   -31,   -15,   -24,   -25,   -31,   -27,
   -20,   -22,   -31,   -31,   -10,   -30,   -16,   -26,   -28,    -5,
   -12 ]

racc_goto_table = [
    21,    10,     1,     3,     4,     5,    17,    30,    42,    44,
    28,    38,   nil,    35,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,
    21 ]

racc_goto_check = [
    10,     9,     1,     2,     3,     4,     5,     6,     7,     8,
    13,    14,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
    10 ]

racc_goto_pointer = [
   nil,     2,     2,     3,     4,    -3,   -10,   -22,   -22,    -6,
   -10,   nil,   nil,    -5,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    13,    14,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 17, :_reduce_none,
  2, 17, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  6, 19, :_reduce_5,
  0, 21, :_reduce_6,
  2, 21, :_reduce_7,
  2, 21, :_reduce_8,
  0, 22, :_reduce_none,
  2, 22, :_reduce_none,
  0, 23, :_reduce_11,
  2, 23, :_reduce_12,
  3, 20, :_reduce_13,
  3, 20, :_reduce_14,
  3, 25, :_reduce_15,
  4, 25, :_reduce_16,
  1, 26, :_reduce_17,
  1, 26, :_reduce_18,
  2, 27, :_reduce_19,
  3, 27, :_reduce_20,
  1, 29, :_reduce_21,
  2, 29, :_reduce_22,
  1, 28, :_reduce_23,
  3, 28, :_reduce_24,
  3, 28, :_reduce_25,
  4, 28, :_reduce_26,
  1, 30, :_reduce_27,
  2, 30, :_reduce_28,
  0, 24, :_reduce_none,
  1, 24, :_reduce_none ]

racc_reduce_n = 31

racc_shift_n = 51

racc_token_table = {
  false => 0,
  :error => 1,
  :COPY => 2,
  :REPLACE => 3,
  :SUPPRESS => 4,
  :PRINTING => 5,
  :REPLACING => 6,
  :OFF => 7,
  :IN => 8,
  :OF => 9,
  :BY => 10,
  :EQEQ => 11,
  :TOKEN => 12,
  "." => 13,
  "(" => 14,
  ")" => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COPY",
  "REPLACE",
  "SUPPRESS",
  "PRINTING",
  "REPLACING",
  "OFF",
  "IN",
  "OF",
  "BY",
  "EQEQ",
  "TOKEN",
  "\".\"",
  "\"(\"",
  "\")\"",
  "$start",
  "statement_list",
  "statement",
  "copy_statement",
  "replace_statement",
  "copy_in",
  "copy_suppress",
  "copy_replacing",
  "_printing",
  "replacing_list",
  "text",
  "pseudo_text",
  "identifier",
  "token_list",
  "subscripts" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'pp_parser.rule.ry', 13)
  def _reduce_5(val, _values, result)
                                ppout.putc("\n")
                            val[1] = fix_filename(val[1])
                            if cb_flag_fold_copy_lower
                              val[1].downcase!
                            elsif cb_flag_fold_copy_upper
                              val[1].upcase!
                            end
                            if val[2]
                              if cb_flag_fold_copy_lower
                                val[2].downcase!
                              elsif cb_flag_fold_copy_upper
                                val[2].upcase!
                              end
                            end
                            ppcopy(val[1], val[2], val[4])

    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 31)
  def _reduce_6(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 33)
  def _reduce_7(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 35)
  def _reduce_8(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'pp_parser.rule.ry', 41)
  def _reduce_11(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 43)
  def _reduce_12(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 46)
  def _reduce_13(val, _values, result)
     pp_set_replace_list(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 48)
  def _reduce_14(val, _values, result)
     pp_set_replace_list(nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 51)
  def _reduce_15(val, _values, result)
     result = cb_replace_list_add(nil, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 53)
  def _reduce_16(val, _values, result)
     result = cb_replace_list_add(val[0], val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 56)
  def _reduce_17(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 58)
  def _reduce_18(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 61)
  def _reduce_19(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 63)
  def _reduce_20(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 66)
  def _reduce_21(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 68)
  def _reduce_22(val, _values, result)
     result = val[0] + [val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 71)
  def _reduce_23(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 74)
  def _reduce_24(val, _values, result)
                                result = val[0] + [" ", "IN", " ", val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 78)
  def _reduce_25(val, _values, result)
                                result = val[0] + [" ", "OF", " ", val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 82)
  def _reduce_26(val, _values, result)
                                result = val[0] + [" ", "("] + val[2] + [")"]

    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 86)
  def _reduce_27(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'pp_parser.rule.ry', 89)
  def _reduce_28(val, _values, result)
                                result = val[0] + [" ", val[1]]

    result
  end
.,.,

# reduce 29 omitted

# reduce 30 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class PPParser
end   # module CobolParser
